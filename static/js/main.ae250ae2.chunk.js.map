{"version":3,"sources":["context.js","components/Post.js","components/Posts.js","components/PostForm.js","components/Modal/ModalWindow.js","components/Navbar/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","Post","post","onChangeCheckbox","openModalWithItem","classes","completed","push","removePost","useContext","className","join","type","checked","onChange","id","title","forWhom","page","onClick","bind","Posts","props","postTrue","posts","filter","postFalse","length","map","onToggle","PostForm","initialData","titlePage","usePost","paramForWhom","useState","setPost","inputCustom","defaultValue","value","setValue","property","event","target","clear","useInputValue","error","setError","useEffect","changeInputHandler","persist","prev","name","onSubmit","preventDefault","trim","onCreate","htmlFor","ModalWindow","closeModal","show","itemData","editPost","addPost","Navbar","info","setInfo","height","viewBox","version","width","fillRule","d","href","App","state","setState","isOpen","modal","setModal","openModal","setOpenModal","setItemData","concat","Number","Date","now","toString","togglePost","openModalWindow","item","Provider","list","saveModal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae250ae2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Context = React.createContext();\n\nexport default Context;","import React, {useContext} from 'react';\nimport Context from \"../context\";\n\nconst Post = ({post, onChangeCheckbox, openModalWithItem}) => {\n    const classes = [];\n    if (post.completed) {\n        classes.push('archive');\n    }\n    const {removePost} = useContext(Context);\n    return (\n        <tr key={post.id} className={classes.join(' ')}>\n            <td><input\n                type=\"checkbox\"\n                checked={post.completed}\n                onChange={() => onChangeCheckbox(post.id)}/>\n            </td>\n            <td>{post.title}</td>\n            <td>{post.forWhom}</td>\n            <td>{post.page}</td>\n            <td><span onClick={removePost.bind(null, post.id)} className=\"text-primary pl-3\">Delete</span></td>\n            <td><span onClick={() => {\n                openModalWithItem(post)\n            }} className=\"text-primary pl-3\">Edit</span></td>\n        </tr>\n    );\n}\n\nexport default Post;","import React from 'react';\nimport Post from \"./Post\";\n\nconst Posts = (props) => {\n    const postTrue = [...props.posts].filter(post => post.completed === true);\n    const postFalse = [...props.posts].filter(post => post.completed === false);\n\n    if (props.completed === \"true\") {\n        return (postTrue.length) ?\n            (\n                <table className=\"table table-responsive w-100 d-block d-md-table\">\n                    <tbody>\n                    <tr>\n                        <th>Archive</th>\n                        <th>Title</th>\n                        <th>for whom</th>\n                        <th>Page</th>\n                        <th></th>\n                        <th></th>\n\n                    </tr>\n                    {\n                        postTrue.map(post => {\n                            return (\n                                <Post\n                                    post={post}\n                                    key={post.id}\n                                    onChangeCheckbox={props.onToggle}\n                                    openModalWithItem={props.openModalWithItem}\n                                />\n                            )\n                        })\n                    }\n                    </tbody>\n                </table>\n            ) :\n            <p className=\"text-center\">Don't have archive posts yet</p>\n    }\n\n    if (props.completed === \"false\") {\n        return (postFalse.length) ?\n            (\n                <table className=\"table table-responsive w-100 d-block d-md-table\">\n                    <tbody>\n                    <tr>\n                        <th>Archive</th>\n                        <th>Title</th>\n                        <th>for whom</th>\n                        <th>Page</th>\n                        <th></th>\n                        <th></th>\n\n                    </tr>\n                    {\n                        postFalse.map(post => {\n                            return (\n                                <Post\n                                    post={post}\n                                    key={post.id}\n                                    onChangeCheckbox={props.onToggle}\n                                    openModalWithItem={props.openModalWithItem}\n                                />\n                            )\n                        })\n                    }\n                    </tbody>\n                </table>\n            ) :\n            <p className=\"text-center\">Don't have posts yet</p>\n    }\n}\n\nexport default Posts;","import React, {useState, useEffect} from 'react';\n\n\nfunction useInputValue(defaultValue = '') {\n    const [value, setValue] = useState(defaultValue)\n\n    return {\n        property: {\n            value,\n            onChange: event => setValue(event.target.value)\n        },\n        clear: () => setValue(''),\n        value: () => value\n    }\n}\n\nexport const PostForm = (props) => {\n\n    const initialData = {id: -1, title: \"\", page: 0, forWhom: '', completed: false};\n\n    const titlePage = (typeof props.post.id === 'number') ? 'Edit post' : 'Create new post';\n    const usePost = (typeof props.post.id === 'number') ? props.post : initialData;\n    const paramForWhom = (typeof props.post.id === 'number') ? props.post.forWhom : '';\n\n    const [post, setPost] = useState(usePost);\n    let inputCustom = useInputValue(paramForWhom);\n    const [error, setError] = useState('');\n\n\n    useEffect(() => {\n        setError(error);\n    }, [error]);\n\n    const submitHandler = event => {\n        event.preventDefault();\n\n        const title = post.title;\n        const page = post.page;\n        const id = post.id;\n\n        if (!title.trim()) {\n            return setError('Fill in the fields');\n        }\n\n        props.onCreate(id, title, page, inputCustom.value());\n\n        setPost(initialData);\n        inputCustom.clear();\n        setError('');\n    }\n\n    const changeInputHandler = event => {\n        event.persist();\n        setPost(prev => ({\n            ...prev, ...{\n                [event.target.name]: event.target.value\n            }\n        }));\n    }\n\n    return (\n        <form onSubmit={submitHandler}>\n            <h4>{titlePage}</h4>\n            <div className=\"form-group\">\n                <label htmlFor=\"title\">Title post {error.length ?\n                    <span className=\"text-danger\"> {error}</span> : ''}</label>\n                <input\n                    type=\"text\"\n                    className=\"form-control mb-3\"\n                    id=\"title\"\n                    value={post.title}\n                    name=\"title\"\n                    onChange={changeInputHandler}\n                />\n                <label htmlFor=\"title\">Pages in post</label>\n                <input\n                    type=\"text\"\n                    className=\"form-control mb-3\"\n                    id=\"page\"\n                    value={post.page}\n                    name=\"page\"\n                    onChange={changeInputHandler}\n                />\n                Custom hook for input:\n                <label htmlFor=\"forWhom\">For:</label>\n                <input {...inputCustom.property} className=\"form-control\"/>\n            </div>\n            <button className=\"btn btn-success mb-2\" type=\"submit\">Save</button>\n        </form>\n    )\n}","import React, {useContext} from \"react\";\nimport './Modal.css';\nimport {PostForm} from \"../PostForm\";\nimport Context from \"../../context\";\n\nfunction ModalWindow({closeModal, show, itemData}) {\n    const {editPost, addPost} = useContext(Context);\n\n    return (\n        <>\n            {show && (\n                <div className={'modal'}>\n                    <div className=\"modal-body\">\n                        <PostForm post={itemData} onCreate={(typeof itemData.id !== 'number') ? addPost : editPost}/>\n                        <button onClick={closeModal} className=\"btn btn-outline-secondary mb-2 float-right\">Close\n                        </button>\n                    </div>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default ModalWindow;","import React, {useState} from 'react';\nimport './navbar.css';\n\nconst Navbar = () => {\n    const [info, setInfo] = useState(false);\n    const handlePanel = () => {\n        setInfo(!info);\n        if (info) {\n        }\n    }\n    return (\n        <header className=\"header\">\n            <div className=\"base\">\n                <div className=\"container h-container\">\n                    <div className=\"title\">Tarchan Olha</div>\n                    <div onClick={handlePanel}\n                         className=\"info\">\n                        Info\n                        <span data-show={info} className=\"info-mark\">&#10142;</span>\n                    </div>\n                    <div className=\"git\">\n                        <div className=\"git-svg\">\n                            <svg height=\"20\" aria-hidden=\"true\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"20\"\n                                 data-view-component=\"true\" className=\"octicon octicon-mark-github v-align-middle\">\n                                <path fillRule=\"evenodd\"\n                                      d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path>\n                            </svg>\n                        </div>\n                        <a href=\"https://github.com/olha-tarchan/react-post-add-archive\">github</a>\n                    </div>\n                </div>\n\n            </div>\n            <div className=\"info-project\" data-show={info}>\n                <div className=\"container\">\n                    <p>Project wrote on React. Users can change list of notes:</p>\n                    <ul>\n                        <li>add</li>\n                        <li>edit</li>\n                        <li>send to archive</li>\n                        <li>remove</li>\n                    </ul>\n                    <p>List of notes displayed in a form of table. Archived notes are not shown in the notes list. Users\n                        can view archived notes and unarchive them.</p>\n                </div>\n            </div>\n\n\n        </header>\n    );\n};\n\nexport default Navbar;","import './App.css';\nimport React, {useState, useEffect} from \"react\";\nimport Posts from \"./components/Posts\";\nimport Context from \"./context\";\nimport ModalWindow from \"./components/Modal/ModalWindow\";\nimport Navbar from \"./components/Navbar/Navbar\";\n\nfunction App() {\n    const [state, setState] = useState([\n        {id: 0, title: \"What is Lorem Ipsum\", page: 35, forWhom: 'adult', completed: false},\n        {id: 1, title: \"Why do we use it?\", page: 45, forWhom: 'children', completed: false},\n        {id: 2, title: \"Where can I get some?\", page: 415, forWhom: 'children', completed: true},\n        {id: 3, title: \"Where does it come from?\", page: 63, forWhom: 'adult', completed: false}\n    ]);\n\n    const [modal, setModal] = useState({isOpen: false});\n\n    const [openModal, setOpenModal] = useState(false);\n    const [itemData, setItemData] = useState({});\n\n\n    useEffect(() => {\n        setModal(modal);\n    }, [modal])\n\n\n    const addPost = (id, title, page, forWhom) => {\n        setState(state.concat([\n            {\n                id: Number(Date.now().toString()),\n                title,\n                page,\n                forWhom,\n                completed: false\n            }\n        ]));\n        setOpenModal(false);\n        setItemData({});\n    }\n\n    const editPost = (id, title, page, forWhom) => {\n        setState(state.map(post => {\n            if (post.id === id) {\n                post.title = title;\n                post.page = page;\n                post.forWhom = forWhom;\n            }\n            return post\n        }));\n        setOpenModal(false);\n        setItemData({});\n    }\n\n    const removePost = (id) => {\n        setState(state.filter(list => list.id !== id));\n    }\n\n    const togglePost = (id) => {\n        setState(\n            state.map(post => {\n                if (post.id === id) {\n                    post.completed = !post.completed\n                }\n                return post\n            })\n        )\n    }\n\n    const openModalWindow = (item) => {\n        if (!item) {\n            item = {};\n        }\n        setItemData(item);\n        setOpenModal(true);\n    }\n\n    const hideModal = () => {\n        setItemData({});\n        setOpenModal(false);\n    }\n\n    return (\n        <Context.Provider value={{removePost, addPost, editPost}}>\n            <div className=\"page\">\n                <Navbar/>\n\n                <div className=\"container pt-3\">\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <div className=\"form\">\n                                <div>\n                                    <button\n                                        onClick={() => {\n                                            openModalWindow({itemData})\n                                        }}\n                                        className=\"f-btn btn\"\n                                    > +\n                                    </button>\n                                </div>\n                                <div className=\"f-title\">\n                                    Add new post in list of Posts\n                                </div>\n\n                            </div>\n\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12 mb-3\">\n                            <h2>Posts</h2>\n                            <Posts posts={state} completed={\"false\"} onToggle={togglePost}\n                                   openModalWithItem={openModalWindow}/>\n                            <h4 className=\"mt-5\">Archive Posts:</h4>\n                            <Posts posts={state} completed={\"true\"} onToggle={togglePost}\n                                   openModalWithItem={openModalWindow}/>\n                        </div>\n                    </div>\n                    {<ModalWindow\n                        show={openModal}\n                        itemData={itemData}\n                        saveModal={addPost}\n                        closeModal={hideModal}\n                    />}\n                </div>\n            </div>\n        </Context.Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}